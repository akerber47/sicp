(include "lib/3.constraints.scm")

; 3.33
(define (averager a b c)
  (let ((s (make-connector))
        (t (make-connector)))
    (adder a b s)
    (multiplier t c s)
    (constant 2 t)))

; 3.35
(define (squarer a b)
  (define (process-new-value)
    (cond
      ((has-value? b)
       (if (< (get-value b) 0)
           (error "square less than 0!" (get-value b))
           (set-value! a (sqrt (get-value b)) me)))
      ((has-value? a)
       (set-value! b (square (get-value a)) me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'i-have-a-value)
           process-new-value)
          ((eq? request 'i-lost-my-value)
           process-forget-value)
          (else
            (error "Unknown request!"))))
  (connect a me)
  (connect b me)
  me)

; 3.37
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
(define (c- x y)
  (let ((z (make-connector)))
    (adder y z x)
    z))
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))
(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier y z x)
    z))
(define (cv v)
  (let ((z (make-connector)))
    (constant v z)
    z))

(define (centigrade-fahrenheit-converter-expr x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))
