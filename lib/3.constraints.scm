(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           process-new-value)
          ((eq? request 'I-lost-my-value)
           process-forget-value)
          (else
            (error "Unknown request!"))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

(define (inform-about-value constraint)
  ((constraint 'I-have-a-value)))
(define (inform-about-no-value constraint)
  ((constraint 'I-lost-my-value)))

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? m1) (has-value? product))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? m2) (has-value? product))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           process-new-value)
          ((eq? request 'I-lost-my-value)
           process-forget-value)
          (else
            (error "Unknown request!"))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (constant value connector)
  (define (me request)
    (error "Unknown request!"))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (probe name connector)
  (define (process-new-value)
    (newline)
    (write-string "Probe: ")
    (princ name)
    (write-string " = ")
    (princ (get-value connector)))
  (define (process-forget-value)
    (newline)
    (write-string "Probe: ")
    (princ name)
    (write-string " = ?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           process-new-value)
          ((eq? request 'I-lost-my-value)
           process-forget-value)
          (else
            (error "Unknown request!"))))
  (connect connector me)
  me)

(define (make-connector)
  (let ((value '()) (informant '()) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (write-string "Contradiction! ")
             (princ value)
             (write-string " =/= ")
             (princ newval))))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin
            (set! informant '())
            (for-each-except retractor
                             inform-about-no-value
                             constraints))))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints
            (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint)))
    (define (me request)
      (cond
        ((eq? request 'has-value?)
         (not (null? informant)))
        ((eq? request 'value) value)
        ((eq? request 'set-value!) set-my-value)
        ((eq? request 'forget) forget-my-value)
        ((eq? request 'connect) connect)
        (else (error "Unknown operation!"))))
    me))

(define (for-each-except ex proc lst)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) ex) (loop (cdr items)))
          (else
            (proc (car items))
            (loop (cdr items)))))
  (loop lst))

(define (has-value? c) (c 'has-value?))
(define (get-value c) (c 'value))
(define (forget-value! c r) ((c 'forget) r))
(define (set-value! c n i) ((c 'set-value!) n i))
(define (connect c n) ((c 'connect) n))
