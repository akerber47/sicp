In general, the problem is that our algorithms are heuristic bounds - given
bounds on the variables in an algebraic expression, we obtain bounds on the
value of the expression. But these bounds are not guaranteed to be tight and in
fact rewriting the expression can give a better bound (as we saw in 2.15).
Another way of thinking about this is that our interval arithmetic package
fails to obey the laws of arithmetic: factors do not cancel in fractions, etc.

Unfortunately, I'm not sure how to fix this. The best thing that comes to mind
is to calculate tight upper and lower bounds mathematically (using calculus).
But that is vast overkill and there ought to be an easier way to ensure
consistency...
