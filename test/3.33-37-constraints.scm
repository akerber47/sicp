; library
(define (centigrade-fahrenheit-converter c f)
  (let ((u (make-connector))
        (v (make-connector))
        (w (make-connector))
        (x (make-connector))
        (y (make-connector)))
    (multiplier c w u)
    (multiplier v x u)
    (adder v y f)
    (constant 9 w)
    (constant 5 x)
    (constant 32 y)))
; 9C = 5v, where v + 32 = F
; ie 9C = 5(F - 32)

(define (run)
  ; library
  (write-string "\nLibrary")
  (let ((C (make-connector))
        (F (make-connector)))
    (centigrade-fahrenheit-converter C F)
    (probe 'C: C)
    (probe 'F: F)
    (set-value! C 25 'user)
    (set-value! F 212 'user)
    (forget-value! C 'user)
    (set-value! F 212 'user))

  ; 3.33
  (write-string "\n3.33")
  (let ((a (make-connector))
        (b (make-connector))
        (c (make-connector)))
    (averager a b c)
    (probe 'a: a)
    (probe 'b: b)
    (probe 'c: c)
    (set-value! a 10 'user)
    (set-value! b 20 'user)
    (forget-value! b 'user)
    (set-value! c 50 'user))

  ; 3.35
  (write-string "\n3.35")
  (let ((a (make-connector))
        (b (make-connector)))
    (squarer a b)
    (probe 'a: a)
    (probe 'b: b)
    (set-value! a 10 'user)
    (forget-value! a 'user)
    (set-value! b 25 'user))

  (write-string "\n3.37")
  (let* ((C (make-connector))
         (F (centigrade-fahrenheit-converter-expr C)))
    (probe 'C: C)
    (probe 'F: F)
    (set-value! C 25 'user)
    (set-value! F 212 'user)
    (forget-value! C 'user)
    (set-value! F 212 'user))
  "All tests passed!")
