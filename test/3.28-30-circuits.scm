; library
(define the-agenda (make-agenda))
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)

(define (run)
  ; library
  (write-string "\nLibrary")
  (let ((input-1 (make-wire))
        (input-2 (make-wire))
        (a (make-wire)))
    (probe 'and a)
    (and-gate input-1 input-2 a)
    (set-signal! input-1 1)
    (propagate)
    (set-signal! input-2 1)
    (propagate))

  ; 3.28
  (write-string "\n3.28")
  (let ((input-1 (make-wire))
        (input-2 (make-wire))
        (sum (make-wire))
        (carry (make-wire)))
    (probe 'sum sum)
    (probe 'carry carry)
    (half-adder input-1 input-2 sum carry)
    (set-signal! input-1 1)
    (propagate)
    (set-signal! input-2 1)
    (propagate))

  ; 3.29
  (write-string "\n3.29")
  (let ((input-1 (make-wire))
        (input-2 (make-wire))
        (or-out (make-wire)))
    (probe 'compound-or or-out)
    (compound-or-gate input-1 input-2 or-out)
    (set-signal! input-1 1)
    (propagate))

  ; 3.30
  (write-string "\n3.30")
  (let ((a1 (make-wire))
        (a2 (make-wire))
        (a3 (make-wire))
        (b1 (make-wire))
        (b2 (make-wire))
        (b3 (make-wire))
        (s1 (make-wire))
        (s2 (make-wire))
        (s3 (make-wire))
        (c (make-wire)))
    (probe 's1: s1)
    (probe 's2: s2)
    (probe 's3: s3)
    (probe 'c: c)
    (ripple-carry-adder (list a1 a2 a3) (list b1 b2 b3) (list s1 s2 s3) c)
    (write-string "\n001 + 000")
    (set-signal! a1 1)
    (propagate)
    (write-string "\n101 + 111")
    (set-signal! a3 1)
    (set-signal! b1 1)
    (set-signal! b2 1)
    (set-signal! b3 1)
    (propagate))
  "All tests passed!")
