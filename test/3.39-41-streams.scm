(include "lib/3.streams.scm")

(define (run)
  ; library
  (write-string "\nLibrary")
  (let ((a (enumerate-interval 1 10))
        (b (enumerate-interval 3 5)))
    (print-stream (append-streams a b))
    (print-stream (map 1+ b))
    (print-stream (filter even? a))
    (print (accumulate + 0 a))
    (let ((c (stream a b a b a b)))
      (print-stream (flatten c))))

  (write-string "\n3.39")
  (let* ((a1 (enumerate-interval 1 10))
         (a2 (map 1+ a1))
         (a3 (map 1+ a2))
         (a4 (map 1+ a3))
         (a5 (map 1+ a4))
         (b (stream a1 a2 a3 a4 a5)))
    (print-stream (accumulate-n + 0 b))
    (print-stream (accumulate-n * 1 b)))

  (write-string "\n3.40")
  (let ((m (stream (stream 1 2 3 4) (stream 4 5 6 6) (stream 6 7 8 9)))
        (n (stream (stream 1 0 0 0)
                   (stream 0 1 0 0)
                   (stream 0 0 1 0)
                   (stream 0 0 0 1)))
        (v3 (stream 1 -1 0))
        (v4 (stream 1 2 3 4)))
    (print-stream (matrix-times-vector m v4))
    (print (dot-product v3 (matrix-times-vector m v4)))
    (print-stream (transpose m))
    (print-stream (transpose n))
    (print-stream (matrix-times-matrix m n)))

  "All tests passed!")
